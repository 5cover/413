name: Reset Database Notify Discord

on:
  workflow_run:
    workflows: [Reset Database]
    types:
      - completed

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Get previous workflow run status
        id: get_previous_status
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -xeuo pipefail
          PREVIOUS_RUN_ID=$(gh api 'repos/${{ github.repository }}/actions/runs' \
            --jq ".workflow_runs[] | select(.name == \"reset_db\" and .id != ${{ github.event.workflow_run.id }}) | .id" \
            --jq ".[-1]")
          PREVIOUS_STATUS=$(gh api "repos/${{ github.repository }}/actions/runs/$PREVIOUS_RUN_ID" \
            --jq ".conclusion")
          echo "PREVIOUS_STATUS=$PREVIOUS_STATUS" >> $GITHUB_ENV

      - name: Send Discord notification
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          CURRENT_STATUS: "${{ github.event.workflow_run.conclusion }}"
        run: |
          set -xeuo pipefail
          echo "PREVIOUS_STATUS = $PREVIOUS_STATUS"
          echo "CURRENT_STATUS = $CURRENT_STATUS"
          #if [ "$CURRENT_STATUS" == "success" ] && [ "$PREVIOUS_STATUS" == "failure" ]; then
          #  MESSAGE="DB is up and running!"
          #  curl -H "Content-Type: application/json" -X POST -d "{\"content\": \"$MESSAGE\"}" $DISCORD_WEBHOOK_URL
          #elif [ "$CURRENT_STATUS" == "failure" ] && [ "$PREVIOUS_STATUS" == "success" ]; then
          #  MESSAGE="DB is down!"
          #  curl -H "Content-Type: application/json" -X POST -d "{\"content\": \"$MESSAGE\"}" $DISCORD_WEBHOOK_URL
          #fi
